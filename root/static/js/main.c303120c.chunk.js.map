{"version":3,"sources":["actions/actionWrappers.js","common/config.js","common/helpers.js","api/errors.js","api/request.js","api/appAPI.js","reducers/AppReducer.js","actions/AppAction.js","common/formator.js","Components/GraphInput.js","Components/GraphPaths.js","Components/Graphs.js","App.js","Container/AppContainer.js","reducers/index.js","stores/configureStore.js","Root.js","serviceWorker.js","index.js"],"names":["dataAction","type","payload","dispatch","silentApiAction","fn","args","getState","a","apiAction","modes","NetworkError","ApiResponseError","message","response","this","ApiAuthenticationError","ApiAuthorizationError","ApiNotFoundError","ApiDataInvalidError","ApiConflictError","API_PATH","config","API_BASE_URL","parse","d","parseFn","normalizeCase","deepMapKeys","k","camelCase","toCamelCase","serialize","isPlainObject","isArray","snakeCase","toSnakeCase","addIdToken","headers","auth","idToken","get","merge","token","requestFailure","e","res","isUndefined","errors","400","401","403","404","409","status","requestFailureErrorResponse","Promise","reject","request","rawConf","url","method","data","schema","params","normalizeParamCase","identity","options","isNull","isEmpty","email","username","password","omitBy","parseConf","conf","axios","then","opts","resolve","normalize","requestSuccess","fetchGraph","fetchPaths","startNode","postGraph","graphData","postNode","parent","numericValueArray","value","PREFIX","actions","STORE_PATH","GET_GRAPH","STORE_GRAPH","SET_START_NODE","EDIT_GRAPH","getGraph","graph","console","log","nodeFormat","node","assign","id","toString","edgeFormat","source","target","GraphInput","setStartNode","getPath","editGraph","serverGraphData","createGraph","useState","jsonError","setJsonError","parsedJson","setParsedJson","textValue","setTextValue","parseJSON","parsedValue","JSON","style","display","flexDirection","flex","height","width","fontSize","onChange","val","color","disabled","stringify","justifyContent","alignItems","fontWeight","marginTop","onClick","backgroundColor","GraphPaths","paths","graphMode","setGraphMode","addNode","parentNode","setparentNode","childrenNode","setchildrenNode","placeholder","split","Cytoscape","use","dagre","Graph","elements","background","layout","name","stylesheet","selector","content","curveStyle","targetArrowShape","lineColor","targetArrowColor","App","useEffect","length","nodes","nodesData","forEach","element","key","push","uniqueNodes","union","graphFormator","flattenDeep","pathSet","i","pathFormator","className","connect","app","map","toNumber","appReducer","combineReducers","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","Root","AppContainer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c303120c.chunk.js","sourcesContent":["\nexport const staticAction = (type) => (dispatch) => dispatch({type});\n\nexport const dataAction = (type, payload) => (dispatch) => dispatch({type, payload});\n\nexport const silentApiAction = (fn, ...args) => async (dispatch, getState) => {\n  return await fn(...args);\n};\n\nexport const apiAction = (fn, ...args) => async (dispatch) => {\n  // dispatch(staticAction('LOADER_SHOW'));\n  try {\n    return await dispatch(silentApiAction(fn, ...args));\n  }\n  finally {\n    // dispatch(staticAction('LOADER_HIDE'));\n  }\n};\n","export default {\n  API_BASE_URL: \"http://localhost:5000\",\n  API_PATH: '/',\n};\n","import {isNull, omitBy} from 'lodash';\n\n\nexport const omitNulls = d => omitBy(d, isNull);\n\nexport const modes = {\n  GRAPH: \"graph\",\n  PATH: \"path\"\n};\n","import {head, isArray, mapValues} from 'lodash';\n\nexport class NetworkError {\n}\n\n\nexport class ApiResponseError {\n  constructor(message, response = null) {\n    this.message = message;\n    this.response = response;\n  }\n}\n\n\nexport class ApiAuthenticationError extends ApiResponseError {\n}\n\nexport class ApiAuthorizationError extends ApiResponseError {\n}\n\nexport class ApiNotFoundError extends ApiResponseError {\n}\n\nexport class ApiDataInvalidError extends ApiResponseError {\n}\n\nexport class ApiConflictError extends ApiResponseError {\n}\n\nexport const parseErrorMessage = (message) => isArray(message) ?\n  {common: head(message)} :\n                                              mapValues(message, (item) => head(item));\n","import axios from 'axios';\nimport deepMapKeys from 'deep-map-keys';\nimport {camelCase, get, identity, isArray, isEmpty, isNull, isPlainObject, isUndefined, merge, snakeCase} from 'lodash';\nimport {normalize} from 'normalizr';\nimport config from '../common/config';\nimport {omitNulls} from '../common/helpers';\nimport * as errors from './errors';\n\n\nconst {API_PATH, API_BASE_URL} = config;\n\n\nconst serializeAuth = ({email, password}) => {\n  return (\n    {\n      username: email,\n      password,\n    })\n};\n\n\nconst toCamelCase = d => deepMapKeys(d, k => camelCase(k));\n\n\nconst toSnakeCase = d => deepMapKeys(d, k => snakeCase(k));\n\n\nconst parse = (d, {parseFn, normalizeCase}) => {\n  const res = normalizeCase\n              ? toCamelCase(d)\n              : d;\n\n  return parseFn(res);\n};\n\n\nconst serialize = (d, {normalizeCase}) => normalizeCase && (isPlainObject(d) || isArray(d))\n                                          ? toSnakeCase(d)\n                                          : d;\n\nconst addIdToken = (headers, auth) => {\n  const idToken = get(auth, 'idToken');\n  return merge({}, headers, idToken && {token: idToken});\n};\n\nconst parseConf = ({\n                     url,\n                     method,\n                     data = null,\n                     auth = null,\n                     schema = null,\n                     params = null,\n                     normalizeCase = true,\n                     normalizeParamCase = true,\n                     parse: parseFn = identity,\n                     headers = {},\n                   }) => ({\n  parse,\n\n  schema,\n\n  normalizeCase,\n\n  parseFn,\n\n  options: omitNulls({\n    method,\n\n    url: API_BASE_URL + API_PATH + url,\n\n    params: !isNull(params)\n            ? serialize(params, {normalizeCase: normalizeParamCase})\n            : null,\n\n    data: !isNull(data)\n          ? serialize(data, {normalizeCase})\n          : null,\n\n    headers: addIdToken(headers, auth),\n\n    auth: !isEmpty(auth) && !isEmpty(auth.email)\n          ? serializeAuth(auth)\n          : null,\n  }),\n});\n\n\nconst imageData = ({\n                     path = null,\n                     key = 'image',\n                     name = 'image.png',\n                     type = 'image/png',\n                   }) => {\n  const d = new FormData();\n\n  d.append(key, {\n    uri: path,\n    name,\n    type,\n  });\n\n  return d;\n};\n\n\nconst requestSuccess = (res, {schema, ...opts}) => Promise.resolve(res.data)\n  .then(d => parse(d, opts))\n  .then(d => !isNull(schema)\n             ? normalize(d, schema)\n             : d);\n\n\nconst requestFailureErrorResponse = e => {\n  const ErrorType = {\n    400: errors.ApiDataInvalidError,\n    401: errors.ApiAuthorizationError,\n    403: errors.ApiAuthenticationError,\n    404: errors.ApiNotFoundError,\n    409: errors.ApiConflictError,\n  }[e.response.status] || errors.ApiResponseError;\n\n  return new ErrorType(e.message, e.response);\n};\n\n\nconst requestFailure = e => {\n  let res = e;\n\n  if (!isUndefined(e.response)) {\n    res = requestFailureErrorResponse(e);\n  } else if (e.message === 'Network Error') {\n    res = new errors.NetworkError();\n  }\n  // console.log(e);\n\n  return Promise.reject(res);\n};\n\n\nconst request = rawConf => {\n  const {options, ...conf} = parseConf(rawConf);\n  // console.log(options.method + ' ' + options.url);\n  return axios(options)\n    .then(res => requestSuccess(res, conf), requestFailure);\n};\n\n\nexport default request;\n\nexport {\n  imageData,\n  serializeAuth,\n};\n","import request from \"api/request\";\n\nexport const fetchGraph = () => request({\n  url: `api/getgraph`,\n  method: 'GET',\n});\n\nexport const fetchPaths = ({startNode}) => request({\n  url: `api/getpaths?startnode=${startNode}`,\n  method: 'GET',\n});\n\nexport const postGraph = (graphData) => request({\n  url: `api/create`,\n  method: 'POST',\n  data:{\n    ...graphData\n  }\n});\n\nexport const postNode = ({parent, numericValueArray}) => request({\n  url: `api/addnode`,\n  method: 'POST',\n  data:{\n    parent:parent,\n    value: numericValueArray,\n  }\n});\n","const PREFIX = \"[ APP REDUCER ]\";\nconst actions = {\n  STORE_PATH: `${PREFIX} STORE_PATH`,\n  GET_GRAPH: `${PREFIX} GET_GRAPH`,\n  STORE_GRAPH: `${PREFIX} STORE_GRAPH`,\n  SET_START_NODE: `${PREFIX} SET_START_NODE`,\n  EDIT_GRAPH: `${PREFIX} EDIT_GRAPH`,\n};\n\nexport default (\n  state = {\n    graph: [],\n    serverGraphData : [],\n    paths: {},\n    startNode: \"1\"\n  },\n  action\n) => {\n  switch (action.type) {\n    case actions.STORE_GRAPH:\n      return {\n        ...state,\n        serverGraphData: action.payload,\n        graph:action.payload\n      };\n    case actions.STORE_PATH:\n      return {\n        ...state,\n        paths: action.payload\n      };\n    case actions.SET_START_NODE:\n      return {\n        ...state,\n        startNode: action.payload\n      };\n    case actions.EDIT_GRAPH:\n      return {\n        ...state,\n        graph: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n\nexport {\n  actions\n};\n","import {apiAction, dataAction} from \"actions/actionWrappers\";\nimport {fetchGraph, fetchPaths, postGraph, postNode} from \"api/appAPI\";\nimport {actions} from \"reducers/AppReducer\";\nimport {toNumber,map} from 'lodash';\n\nconst getGraph = () => async dispatch => {\n  try {\n    const graph = await dispatch(apiAction(fetchGraph));\n    dispatch(dataAction(actions.STORE_GRAPH,graph));\n  } catch (e) {\n    console.log(\"Can't get graph\");\n  }\n};\nconst getPath = (startNode) => async dispatch => {\n  try {\n    const paths = await dispatch(apiAction(fetchPaths,{startNode}));\n    dispatch(dataAction(actions.STORE_PATH,paths));\n  } catch (e) {\n    console.log(\"Can't get PATHS\");\n  }\n};\n\nconst createGraph = (graph) => async dispatch => {\n  try {\n    await dispatch(apiAction(postGraph, graph));\n    dispatch(getGraph());\n  } catch (e) {\n    console.log(\"Error Creating graph\", e);\n  }\n};\n\nconst setStartNode = (node) => dispatch => {\n    dispatch(dataAction(actions.SET_START_NODE,node));\n};\n\nconst editGraph = (graph) => dispatch => {\n    dispatch(dataAction(actions.EDIT_GRAPH,graph));\n};\n\n\nconst addNode = (parent, value) => async dispatch => {\n  let numericValueArray = map(value,val=>toNumber(val));\n  try {\n    await dispatch(apiAction(postNode, {parent, numericValueArray}));\n    await dispatch(getGraph());\n  } catch (e) {\n    console.log(\"Error Creating Node\");\n  }\n};\n\n\n//Todo :Proper error handeling and edge cases\n\n\nexport {getGraph, setStartNode, getPath, editGraph, createGraph, addNode};\n","import {assign, flattenDeep, forEach, isEmpty, join, map, union} from 'lodash';\n\nfunction graphFormator(graph) {\n\n  if (typeof graph !=='object' || graph.length<1) {\n    return [];\n  }\n\n  const nodes = [];\n  const nodesData = [];\n  //create all nodes\n  try {\n    forEach(graph, (element, key) => nodes.push(...element, key));\n  }catch (e) {\n    return [];\n  }\n  const uniqueNodes = union(nodes);\n  forEach(uniqueNodes, (node) => {\n    nodesData.push(nodeFormat(node));\n  });\n  //create all edges\n\n  forEach(graph,(elements,key)=>{\n    forEach(elements,element=>{\n      nodesData.push(edgeFormat(key,element))\n    })\n  });\n\n  //return combined data\n  return nodesData;\n}\n\n// TODO - single path return disjion node\n\nfunction pathFormator(paths) {\n  const nodes = union(flattenDeep(paths));\n  const nodesData = [];\n  //getUnique nodes\n  forEach(nodes, node => {\n    nodesData.push(nodeFormat(node));\n  });\n\n  forEach(paths, pathSet => {\n    if (pathSet.length > 1) {\n      for (let i = 0; i < pathSet.length - 1; i++) {\n        nodesData.push(edgeFormat(pathSet[i], pathSet[i + 1]));\n      }\n    }\n  });\n\n  return nodesData;\n}\n\nconst nodeFormat = (node) => {\n  return assign({}, {data: {id: node.toString()}});\n};\n\nconst edgeFormat = (source, target) => {\n  return assign({}, {\n    data: {\n      id: source.toString() + target.toString(),\n      source: source.toString(),\n      target: target.toString()\n    }\n  });\n};\n\n\nexport {graphFormator, pathFormator};\n","import {isEmpty} from 'lodash';\nimport React, {useState} from 'react';\n\n\nfunction GraphInput({value, startNode, setStartNode, getPath, editGraph, serverGraphData, createGraph, getGraph}) {\n\n  const [jsonError, setJsonError] = useState(\"\");\n  const [parsedJson, setParsedJson] = useState([]);\n  const [textValue, setTextValue] = useState([]);\n\n  const handleClick = () => {\n    getPath(startNode);\n  };\n\n  const setTextField = (val) => {\n    setTextValue(val);\n    parseJSON(val);\n  };\n\n  const parseJSON = (value) => {\n    try {\n      let parsedValue = JSON.parse(value);\n      setParsedJson(parsedValue);\n      editGraph(parsedValue);\n      setJsonError(\"\");\n    } catch (e) {\n      setJsonError(\"Error in format\", e);\n    }\n  };\n\n  const submitGraph = () => {\n    !isEmpty(parsedJson) && createGraph(parsedJson);\n  };\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', flex: 1, height: '100%'}}>\n      <div style={{display: 'flex', flexDirection: 'row',flex:1}}>\n        <div style={{display: 'flex', flexDirection: 'column', flex: 1}}>\n          <label>Enter graph</label>\n          <textarea\n            style={{width: '100%', height: '60%', fontSize: 16,flex:1}}\n            onChange={(e) => setTextField(e.target.value)}\n            value={textValue}\n          />\n        </div>\n        <div style={{display: 'flex', flexDirection: 'column', flex: 1}}>\n          <label>Graph Format <span style={{color: 'red'}}>{jsonError}</span></label>\n          <textarea\n            style={{width: '100%', height: '60%', fontSize: 16,flex:1}}\n            disabled={true}\n            value={JSON.stringify(parsedJson)}\n          />\n        </div>\n      </div>\n      <button\n        style={{\n          height: 50,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: \"#4970ff\",\n          fontWeight: 'bold',\n          marginTop:'auto'\n        }}\n        onClick={submitGraph}\n      >POST GRAPH\n      </button>\n      GRAPH DATA ON SERVER :\n      <textarea\n        style={{width: '100%', fontSize: 16}}\n        disabled={true}\n        value={JSON.stringify(serverGraphData)}\n      />\n      <div>\n        <label>Specify Start Node </label>\n        <input value={startNode} onChange={(e) => setStartNode(e.target.value)}/>\n      </div>\n      <div style={{display: 'flex', flexDirection: 'row',marginTop:'auto'}}>\n        <div style={{\n          backgroundColor: \"#f44336\",\n          height: 50,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: \"#ffffff\",\n          fontWeight: 'bold',\n          flex: 1\n        }}\n             onClick={() => handleClick()}\n        >GET PATHS\n        </div>\n        <div style={{\n          backgroundColor: \"#f4a231\",\n          height: 50,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: \"#ffffff\",\n          fontWeight: 'bold',\n          flex: 1\n        }}\n             onClick={getGraph}\n        >GET GRAPH\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphInput;\n","import {modes} from \"common/helpers\";\nimport {isEmpty, split, toNumber} from 'lodash';\nimport React, {useState} from 'react';\n\n\nfunction GraphPaths({paths, graphMode, setGraphMode, addNode}) {\n\n\n  const [parentNode, setparentNode] = useState(\"\");\n  const [childrenNode, setchildrenNode] = useState([]);\n\n  console.log(\"parent\", parentNode, \"child\", childrenNode);\n\n  function handleAddNode() {\n    if (!isEmpty(parentNode) && !isEmpty(childrenNode)) {\n      addNode(parentNode, childrenNode);\n    } else {\n      console.log(\"Error in values\");\n    }\n  };\n\n  const addChildren = (val) => {\n    setchildrenNode(split(val,','))\n  };\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', flex: 1, height: '100%'}}>\n      <p style={{fontSize:18}}>{JSON.stringify(paths)}</p>\n\n      <div>\n        <input onChange={(e) => setparentNode(e.target.value)} placeholder={\"Parent - p1\"}/>\n        <input onChange={(e) => addChildren(e.target.value) }\n               placeholder={\"Children - [n2,n3]\"}/>\n        <button onClick={handleAddNode}>ADD NODE</button>\n      </div>\n\n      <div style={{display: 'flex', flexDirection: 'column', marginTop: 'auto'}}>\n        <p>SELECT GRAPH TO DRAW FOR</p>\n        <div style={{display: 'flex', flexDirection: 'row'}}>\n        <div style={{\n          flex: 1,\n          backgroundColor: graphMode === modes.GRAPH ? '#2196F3' : '#767f8d',\n          height: 40,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: '#ffffff'\n        }}\n             onClick={() => setGraphMode(modes.GRAPH)}\n        >GRAPH\n        </div>\n        <div style={{\n          flex: 1,\n          backgroundColor: graphMode === modes.PATH ? '#2196F3' : '#767f8d',\n          height: 40,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          color: '#ffffff'\n        }}\n             onClick={() => setGraphMode(modes.PATH)}\n        >PATH\n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GraphPaths;\n","import Cytoscape from 'cytoscape';\nimport dagre from 'cytoscape-dagre';\nimport {isEmpty} from 'lodash';\nimport React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nCytoscape.use(dagre);\n\nfunction Graph({graphData}) {\n  return (\n    isEmpty(graphData) ? <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>GRAPH DATA NOT\n                         AVAILABLE</div> :\n    <CytoscapeComponent\n      elements={graphData}\n      style={{width: '100%', height: '100%', background: '#673ab7', display: 'flex'}}\n      layout={{name: 'dagre'}}\n      stylesheet={[\n        {\n          selector: 'node',\n          style: {\n            content: 'data(id)',\n            backgroundColor: '#f44336',\n          }\n        },\n        {\n          selector: 'edge',\n          style: {\n            curveStyle: 'bezier',\n            targetArrowShape: 'triangle',\n            width: '3',\n            lineColor: '#ffc107',\n            targetArrowColor: '#ff9800'\n          }\n        }\n      ]}\n    />\n  );\n\n}\n\nexport default Graph;\n","import {graphFormator, pathFormator} from \"common/formator\";\nimport {modes} from \"common/helpers\";\nimport GraphInput from \"Components/GraphInput\";\nimport GraphPaths from \"Components/GraphPaths\";\nimport Graph from \"Components/Graphs\";\nimport React, {useEffect, useState} from 'react';\nimport './App.css';\n\n\nfunction App({graph, getGraph, startNode, paths, setStartNode, getPath, createGraph, editGraph,serverGraphData,addNode}) {\n\n  useEffect(() => {\n    getGraph();\n  }, []);\n\n  const [graphMode, setGraphMode] = useState(modes.GRAPH);\n\n  const graphData = graphMode === modes.GRAPH ? graphFormator(graph) : pathFormator(paths);\n\n  return (\n    <div className=\"App\">\n      <div id=\"graphDataWrapper\">\n        <div id=\"graphData\">\n          <GraphInput value={graph} startNode={startNode} setStartNode={setStartNode} getPath={getPath}\n                      serverGraphData={serverGraphData}\n                      getGraph={getGraph}\n                      createGraph={createGraph} editGraph={editGraph}/>\n        </div>\n        <div id=\"paths\">\n          <GraphPaths paths={paths} setGraphMode={setGraphMode} graphMode={graphMode} addNode={addNode}/>\n        </div>\n      </div>\n      <div id=\"graph\">\n        <Graph graphData={graphData}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import {addNode, createGraph, editGraph, getGraph, getPath, setStartNode} from \"actions/AppAction\";\nimport {connect} from 'react-redux';\nimport App from '../App';\n\nconst mapStateToProps = ({app: {graph, startNode, paths,serverGraphData}}) => (\n  {\n    graph,\n    startNode,\n    paths,\n    serverGraphData\n  }\n);\n\nexport default connect(mapStateToProps, {getGraph, setStartNode, getPath,createGraph,editGraph,addNode})(App);\n","import {combineReducers} from \"redux\";\nimport app from \"./AppReducer\";\n\n\nconst appReducer = combineReducers({\n  app,\n});\n\n\nexport default (state, action) => {\n  return appReducer(state, action)\n}\n","import {applyMiddleware, compose, createStore} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n\nexport default function configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunkMiddleware))\n  );\n\n  return {\n    store,\n  };\n}\n\n","import React from \"react\";\nimport {Provider} from \"react-redux\";\nimport AppContainer from \"Container/AppContainer\";\nimport configureStore from \"./stores/configureStore\";\n\nconst {store} = configureStore();\n\nfunction Root() {\n  return (\n    <Provider store={store}>\n      <AppContainer/>\n    </Provider>\n  );\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from \"./Root\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}